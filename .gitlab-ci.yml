stages:
  - download
  - build
  - containerize
  - scan

include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

check:
  parallel:
    matrix:
      - { TESS_BRANCH: 4, GIT_STRATEGY: none }
      - { TESS_BRANCH: 5, GIT_STRATEGY: none }
  stage: download
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script:
    - apk add --no-cache jq
    - touch version${TESS_BRANCH}.txt
    - VERSION=$(wget -qO- https://api.github.com/repos/tesseract-ocr/tesseract/releases | jq -r ".[].tag_name" | grep -oP "[$TESS_BRANCH][.]\d+[.]\d+" | head -n1)
    - LEPT_VERSION=$(wget -qO- https://api.github.com/repos/DanBloomberg/leptonica/releases | jq -r ".[0].tag_name")
    - DONE=$(cat version${TESS_BRANCH}.txt)
    - |
      if [ ! -z "${FORCE_BUILD+x}" ] ||  [ "${VERSION}" != "${DONE}" ]; then
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[LEPT_VERSION]=$LEPT_VERSION" -F "variables[TESS_BRANCH]=$TESS_BRANCH" -F "variables[VERSION]=${VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[TESS_BRANCH]=$TESS_BRANCH" -F "variables[VERSION]=${VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi

download:
  rules:
    - if: "$BUILD"
      when: always
    - when: never
  variables:
    GIT_STRATEGY: none
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache wget coreutils
  script:
    - wget -O tess.tar.gz https://github.com/tesseract-ocr/tesseract/archive/${VERSION}.tar.gz
    - wget -O lept.tar.gz https://github.com/DanBloomberg/leptonica/releases/download/${LEPT_VERSION}/leptonica-${LEPT_VERSION}.tar.gz
    - wget https://github.com/tesseract-ocr/tessdata/raw/3.04.00/equ.traineddata
    - wget https://github.com/tesseract-ocr/tessdata/raw/3.04.00/osd.traineddata
    - wget -O eng.traineddata https://github.com/tesseract-ocr/tessdata_fast/blob/master/eng.traineddata?raw=true
  artifacts:
    paths:
      - tess.tar.gz
      - lept.tar.gz
      - osd.traineddata
      - equ.traineddata
      - eng.traineddata
    expire_in: 5 days

#region UBUNTU

.build:ubuntu:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/ubuntu:${UBUNTU_VERSION}
  dependencies:
    - download
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
    - apt-get update
    - apt-get install -y locales
    - EXTRA_CONFIG_ARGS=""
    - if [ "${UBUNTU_VERSION}" = "20.04" ]; then EXTRA_CONFIG_ARGS="--disable-dependency-tracking"; fi
    - if [ "${UBUNTU_VERSION}" = "20.10" ]; then EXTRA_CONFIG_ARGS="--disable-dependency-tracking"; fi
    - locale-gen en_US.UTF-8
    - dpkg-reconfigure --frontend=noninteractive locales
    - apt-get install -y ccache g++ gcc autoconf automake make libtool pkg-config libpng-dev libturbojpeg0-dev libtiff5-dev zlib1g-dev libwebp-dev libopenjp2-7-dev libgif-dev
    - update-ccache-symlinks
    - export PATH="/usr/lib/ccache:$PATH"
    - ccache -s
  script:
    - mkdir -p src/tess
    - mkdir -p src/lept
    - tar -xhzf lept.tar.gz -C src/lept --strip-components=1
    - tar -xhzf tess.tar.gz -C src/tess --strip-components=1
    - cd ${CI_PROJECT_DIR}/src/lept
    - ./configure ${EXTRA_CONFIG_ARGS}
    - make
    - make install
    - cd ${CI_PROJECT_DIR}/src/tess
    - ./autogen.sh
    - ./configure --with-extra-libraries=/usr/local/lib ${EXTRA_CONFIG_ARGS}
    - make
    - make install
    - cd ${CI_PROJECT_DIR}
    - cp entrypoint /usr/local/bin/entrypoint
    - cp ubuntu/train-lang /usr/local/bin/train-lang
    - mkdir -p /usr/local/share/tessdata
    - cp eng.traineddata equ.traineddata osd.traineddata /usr/local/share/tessdata
    - chmod -R +x /usr/local/bin
    - $(cd /usr/local && tar -czf ${CI_PROJECT_DIR}/tess-${DOCKER_ARCH}.tar.gz *)
    - mkdir -p binaries/${UBUNTU_VERSION}
    - mv tess-${DOCKER_ARCH}.tar.gz binaries/${UBUNTU_VERSION}
    - ccache -s
  cache:
    paths:
      - ccache
    key: tess.ubuntu.build.ccache-${DOCKER_ARCH}-${UBUNTU_VERSION}-${TESS_BRANCH}
  artifacts:
    paths:
      - binaries
    when: on_success
    expire_in: 1 day

build:ubuntu:amd:
  extends: .build:ubuntu
  parallel:
    matrix:
      - { UBUNTU_VERSION: "18.04" }
      - { UBUNTU_VERSION: "20.04" }
      - { UBUNTU_VERSION: "21.04" }
      - { UBUNTU_VERSION: "21.10" }
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "amd64"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-amd64

build:ubuntu:arm:
  extends: .build:ubuntu
  parallel:
    matrix:
      - { UBUNTU_VERSION: "18.04" }
      - { UBUNTU_VERSION: "20.04" }
      - { UBUNTU_VERSION: "21.04" }
      - { UBUNTU_VERSION: "21.10" }
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "arm64"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-aarch64


.containerize:ubuntu:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  needs:
    - build:ubuntu:arm
    - build:ubuntu:amd
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - mkdir bin
    - mv binaries/${UBUNTU_VERSION}/* bin/
    - TAGLIST=$(helper taglist "jitesoft/tesseract-ocr,ghcr.io/jitesoft/tesseract,${CI_REGISTRY_IMAGE}" "${TAGS}")
    - docker buildx build --push ${TAGLIST} --platform "linux/amd64,linux/arm64" --build-arg BUILD_TIME="$(date -Iseconds)" --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" --build-arg TESSERACT_VERSION="${TESS_VERSION}" --build-arg LEPTONICA_VERSION="${LEPT_VERSION}" -f ubuntu/Dockerfile .
  tags: [protected, jitesoft, buildx]


containerize:ubuntu:4:
  extends: .containerize:ubuntu
  rules:
    - if: "$BUILD && $TESS_BRANCH = 4"
      when: on_success
    - when: never
  parallel:
    matrix:
      - { UBUNTU_VERSION: "18.04", TAGS: "4-18.04,4-bionic" }
      - { UBUNTU_VERSION: "20.04", TAGS: "4-20.04,4-focal,4-lts,4-latest,4,4-${VERSION}" }
      - { UBUNTU_VERSION: "21.04", TAGS: "4-21.04,4-hirsute" }
      - { UBUNTU_VERSION: "21.10", TAGS: "4-21.10,4-impish" }

containerize:ubuntu:5:
  extends: .containerize:ubuntu
  rules:
    - if: "$BUILD && $TESS_BRANCH = 5"
      when: on_success
    - when: never
  parallel:
    matrix:
      - { UBUNTU_VERSION: "18.04", TAGS: "18.04,bionic" }
      - { UBUNTU_VERSION: "20.04", TAGS: "20.04,focal,lts,latest,5,${VERSION}" }
      - { UBUNTU_VERSION: "21.04", TAGS: "21.04,hirsute" }
      - { UBUNTU_VERSION: "21.10", TAGS: "21.10,impish" }



#endregion


.build:alpine:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: build
  dependencies:
    - download
  image: registry.gitlab.com/jitesoft/dockerfiles/misc/buildbase
  before_script:
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
    - export PATH="/usr/lib/ccache/bin:$PATH"
  script:
    - mkdir -p src/tess
    - mkdir -p src/lept
    - tar -xhzf lept.tar.gz -C src/lept --strip-components=1
    - tar -xhzf tess.tar.gz -C src/tess --strip-components=1
    - apk add --no-cache pango-dev icu-dev cairo-dev libpng-dev libjpeg-turbo-dev tiff-dev libwebp-dev giflib-dev openjpeg-dev patch
    - | 
      if [ "$TESS_BRANCH" = "4" ]; then
        patch src/tess/src/ccutil/ocrclass.h < alpine/tess.patch
      fi
    - cd ${CI_PROJECT_DIR}/src/lept
    - ./configure
    - make
    - make install
    - cd ${CI_PROJECT_DIR}/src/tess
    - ./autogen.sh
    - ./configure
    - make
    - make install
    - cd ${CI_PROJECT_DIR}
    - cp alpine/train-lang /usr/local/bin
    - mkdir -p /usr/local/share/tessdata
    - cp eng.traineddata equ.traineddata osd.traineddata /usr/local/share/tessdata
    - cp entrypoint /usr/local/bin
    - chmod +x /usr/local/bin
    - $(cd /usr/local && tar -czf ${CI_PROJECT_DIR}/tess-${DOCKER_ARCH}.tar.gz *)
    - mkdir binaries
    - mv tess-${DOCKER_ARCH}.tar.gz binaries/
  cache:
    paths:
      - ccache
    key: tess.build.ccache-${DOCKER_ARCH}-${TESS_BRANCH}
  artifacts:
    paths:
      - binaries
    when: on_success
    expire_in: 1 day

build:alpine:amd:
  extends: .build:alpine
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "amd64"
  tags:
    - native-amd64

build:alpine:arm:
  extends: .build:alpine
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "arm64"
  tags:
    - native-aarch64

containerize:alpine:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  needs:
    - build:alpine:arm
    - build:alpine:amd
  variables:
    GL_TAGS: "${VERSION},${TESS_BRANCH}"
    TAGS: "${VERSION}-alpine,${TESS_BRANCH}-alpine"
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  before_script:
    - |
      if [ "${TESS_BRANCH}" = "5" ]; then
        GL_TAGS="${GL_TAGS},latest"
        TAGS="${TAGS},latest-alpine,alpine"
      fi
  script:
    - TAGLIST=$(helper taglist "jitesoft/tesseract-ocr,ghcr.io/jitesoft/tesseract,${CI_REGISTRY_IMAGE}/alpine" "${TAGS}")
    - docker buildx build --push ${TAGLIST} --platform linux/amd64,linux/arm64 --build-arg BUILD_TIME="$(date -Iseconds)" --build-arg TESSERACT_VERSION="${TESS_VERSION}" --build-arg LEPTONICA_VERSION="${LEPT_VERSION}" -f alpine/Dockerfile .
  tags: [protected, jitesoft, buildx]

scan:ubuntu:4:
  extends: .container_scanning
  rules:
    - if: "$SCAN && $TESS_BRANCH = 4"
      when: always
    - if: "$BUILD && $TESS_BRANCH = 4"
      when: on_success
    - when: never
  parallel:
    matrix:
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:4-18.04", GIT_STRATEGY: "none" }
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:4-20.04", GIT_STRATEGY: "none" }
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:4-21.04", GIT_STRATEGY: "none" }
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:4-21.10", GIT_STRATEGY: "none" }

scan:ubuntu:5:
  extends: .container_scanning
  rules:
    - if: "$SCAN && $TESS_BRANCH = 5"
      when: always
    - if: "$BUILD && $TESS_BRANCH = 5"
      when: on_success
    - when: never
  parallel:
    matrix:
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:18.04", GIT_STRATEGY: "none" }
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:20.04", GIT_STRATEGY: "none" }
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:21.04", GIT_STRATEGY: "none" }
      - { SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:21.10", GIT_STRATEGY: "none" }

scan:alpine:4:
  extends: .container_scanning
  rules:
    - if: "$SCAN && $TESS_BRANCH = 4"
      when: always
    - if: "$BUILD && $TESS_BRANCH = 4"
      when: on_success
    - when: never
  variables:
    GIT_STRATEGY: none
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/alpine:4"

scan:alpine:5:
  extends: .container_scanning
  rules:
    - if: "$SCAN && $TESS_BRANCH = 5"
      when: always
    - if: "$BUILD && $TESS_BRANCH = 5"
      when: on_success
    - when: never
  variables:
    GIT_STRATEGY: none
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/alpine:5"
