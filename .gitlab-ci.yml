stages:
  - download
  - build
  - scan

include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan.yml

# wget -qO- https://github.com/tesseract-ocr/tesseract/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}'
# For future reference...

download:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine
  before_script:
    - apk add --no-cache wget grep coreutils
  script:
    - TESS_VERSION=$(wget -qO- https://github.com/tesseract-ocr/tesseract/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - LEPT_VERSION=$(wget -qO- https://github.com/DanBloomberg/leptonica/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - wget -O tess.tar.gz https://github.com/tesseract-ocr/tesseract/archive/${TESS_VERSION}.tar.gz
    - wget -O lept.tar.gz https://github.com/DanBloomberg/leptonica/archive/leptonica-${LEPT_VERSION}.tar.gz
  artifacts:
    paths:
      - tess.tar.gz
      - lept.tar.gz
    expire_in: 5 days

.build:ubuntu:
  dependencies:
    - download
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker:18.09.6
  services:
    - registry.gitlab.com/jitesoft/dockerfiles/docker/dind:18.09.6
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
    - echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USER} --password-stdin
    - apk add --no-cache wget grep
    - TESS_VERSION=$(wget -qO- https://github.com/tesseract-ocr/tesseract/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - LEPT_VERSION=$(wget -qO- https://github.com/DanBloomberg/leptonica/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
  script:
    - docker build --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" --label "com.jitesoft.app.tesseract.version=${TESS_VERSION}" --label "com.jitesoft.app.leptonica.version=${LEPT_VERSION}" -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${UBUNTU_VERSION} -f ubuntu/Dockerfile .
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${UBUNTU_VERSION} ${CI_REGISTRY_IMAGE}:${tag}
        docker push ${CI_REGISTRY_IMAGE}:${tag}
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${UBUNTU_VERSION} jitesoft/tesseract-ocr:${tag}
        docker push jitesoft/tesseract-ocr:${tag}
      done

.build:alpine:
  variables:
    TAGS: "alpine"
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker:18.09.6
  services:
    - registry.gitlab.com/jitesoft/dockerfiles/docker/dind:18.09.6
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
    - echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USER} --password-stdin
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-alpine -f alpine/Dockerfile .
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-alpine ${CI_REGISTRY_IMAGE}:${tag}
        docker push ${CI_REGISTRY_IMAGE}:${tag}
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-alpine jitesoft/tesseract-ocr:${tag}
        docker push jitesoft/tesseract-ocr:${tag}
      done


build:alpine:latest:
  extends: .build:alpine
  variables:
    TAGS: "alpine"

build:ubuntu:18.04:
  extends: .build:ubuntu
  variables:
    UBUNTU_VERSION: "18.04"
    TAGS: "18.04 bionic"

build:ubuntu:18.10:
  extends: .build:ubuntu
  variables:
    UBUNTU_VERSION: "18.10"
    TAGS: "18.10 cosmic"

build:ubuntu:19.04:
  extends: .build:ubuntu
  variables:
    UBUNTU_VERSION: "19.04"
    TAGS: "19.04 disco"

build:ubuntu:19.10:
  extends: .build:ubuntu
  variables:
    UBUNTU_VERSION: "19.10"
    TAGS: "19.10 eoan latest"

scan:ubuntu:18.04:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:18.04"


scan:ubuntu:18.10:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:18.10"


scan:ubuntu:19.04:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:19.04"


scan:ubuntu:19.10:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:19.10"


scan:alpine:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:alpine"
