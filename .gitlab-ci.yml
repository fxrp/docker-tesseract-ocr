stages:
  - download
  - build
  - containerize
  - scan

include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

download:
  variables:
    GIT_STRATEGY: none
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache wget grep coreutils
  script:
    - TESS_VERSION=$(wget -qO- https://github.com/tesseract-ocr/tesseract/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - LEPT_VERSION=$(wget -qO- https://github.com/DanBloomberg/leptonica/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - wget -O tess.tar.gz https://github.com/tesseract-ocr/tesseract/archive/${TESS_VERSION}.tar.gz
    - wget -O lept.tar.gz https://github.com/DanBloomberg/leptonica/releases/download/${LEPT_VERSION}/leptonica-${LEPT_VERSION}.tar.gz
    - wget https://github.com/tesseract-ocr/tessdata/raw/3.04.00/equ.traineddata
    - wget https://github.com/tesseract-ocr/tessdata/raw/3.04.00/osd.traineddata
    - wget -O eng.traineddata https://github.com/tesseract-ocr/tessdata_fast/blob/master/eng.traineddata?raw=true
    - printf "${TESS_VERSION}" > tess.txt
    - printf "${LEPT_VERSION}" > lept.txt
  artifacts:
    paths:
      - tess.txt
      - lept.txt
      - tess.tar.gz
      - lept.tar.gz
      - osd.traineddata
      - equ.traineddata
      - eng.traineddata
    expire_in: 5 days

.build:ubuntu:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/ubuntu:${UBUNTU_VERSION}
  dependencies:
    - download
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
    - apt-get update
    - apt-get install -y locales
    - EXTRA_CONFIG_ARGS=""
    - if [ "${UBUNTU_VERSION}" = "20.04" ]; then EXTRA_CONFIG_ARGS="--disable-dependency-tracking"; fi
    - if [ "${UBUNTU_VERSION}" = "20.10" ]; then EXTRA_CONFIG_ARGS="--disable-dependency-tracking"; fi
    - locale-gen en_US.UTF-8
    - dpkg-reconfigure --frontend=noninteractive locales
    - apt-get install -y ccache g++ gcc autoconf automake make libtool pkg-config libpng-dev libturbojpeg0-dev libtiff5-dev zlib1g-dev libwebp-dev libopenjp2-7-dev libgif-dev
    - update-ccache-symlinks
    - export PATH="/usr/lib/ccache:$PATH"
    - ccache -s
  script:
    - mkdir -p src/tess
    - mkdir -p src/lept
    - tar -xhzf lept.tar.gz -C src/lept --strip-components=1
    - tar -xhzf tess.tar.gz -C src/tess --strip-components=1
    - cd ${CI_PROJECT_DIR}/src/lept
    - ./configure ${EXTRA_CONFIG_ARGS}
    - make
    - make install
    - cd ${CI_PROJECT_DIR}/src/tess
    - ./autogen.sh
    - ./configure --with-extra-libraries=/usr/local/lib ${EXTRA_CONFIG_ARGS}
    - make
    - make install
    - cd ${CI_PROJECT_DIR}
    - cp entrypoint /usr/local/bin/entrypoint
    - cp ubuntu/train-lang /usr/local/bin/train-lang
    - mkdir -p /usr/local/share/tessdata
    - cp eng.traineddata equ.traineddata osd.traineddata /usr/local/share/tessdata
    - chmod -R +x /usr/local/bin
    - $(cd /usr/local && tar -czf ${CI_PROJECT_DIR}/tess-${DOCKER_ARCH}.tar.gz *)
    - mkdir binaries
    - mv tess-${DOCKER_ARCH}.tar.gz binaries/
    - ccache -s
  cache:
    paths:
      - ccache
    key: tess.ubuntu.build.ccache-${DOCKER_ARCH}-${UBUNTU_VERSION}
  artifacts:
    paths:
      - binaries
      - tess.txt
      - lept.txt
    when: on_success
    expire_in: 1 day

build:ubuntu:amd:20.04:
  extends: .build:ubuntu
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "amd64"
    UBUNTU_VERSION: "20.04"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-amd64

build:ubuntu:arm:20.04:
  extends: .build:ubuntu
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "arm64"
    UBUNTU_VERSION: "20.04"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-aarch64

build:ubuntu:amd:20.10:
  extends: .build:ubuntu
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "amd64"
    UBUNTU_VERSION: "20.10"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-amd64

build:ubuntu:arm:20.10:
  extends: .build:ubuntu
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "arm64"
    UBUNTU_VERSION: "20.10"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-aarch64

build:ubuntu:amd:18.04:
  extends: .build:ubuntu
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "amd64"
    UBUNTU_VERSION: "18.04"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-amd64

build:ubuntu:arm:18.04:
  extends: .build:ubuntu
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "arm64"
    UBUNTU_VERSION: "18.04"
    CCACHE_COMPRESS: "true"
    CCACHE_MAXSIZE: "128M"
  tags:
    - native-aarch64

.build:alpine:
  stage: build
  dependencies:
    - download
  image: registry.gitlab.com/jitesoft/dockerfiles/misc/buildbase
  before_script:
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
    - export PATH="/usr/lib/ccache/bin:$PATH"
  script:
    - mkdir -p src/tess
    - mkdir -p src/lept
    - tar -xhzf lept.tar.gz -C src/lept --strip-components=1
    - tar -xhzf tess.tar.gz -C src/tess --strip-components=1
    - apk add --no-cache pango-dev icu-dev cairo-dev libpng-dev libjpeg-turbo-dev tiff-dev libwebp-dev giflib-dev openjpeg-dev patch
    - patch src/tess/src/ccutil/ocrclass.h < alpine/tess.patch
    - cd ${CI_PROJECT_DIR}/src/lept
    - ./configure
    - make
    - make install
    - cd ${CI_PROJECT_DIR}/src/tess
    - ./autogen.sh
    - ./configure
    - make
    - make install
    - cd ${CI_PROJECT_DIR}
    - cp alpine/train-lang /usr/local/bin
    - mkdir -p /usr/local/share/tessdata
    - cp eng.traineddata equ.traineddata osd.traineddata /usr/local/share/tessdata
    - cp entrypoint /usr/local/bin
    - chmod +x /usr/local/bin
    - $(cd /usr/local && tar -czf ${CI_PROJECT_DIR}/tess-${DOCKER_ARCH}.tar.gz *)
    - mkdir binaries
    - mv tess-${DOCKER_ARCH}.tar.gz binaries/
  cache:
    paths:
      - ccache
    key: tess.build.ccache-${DOCKER_ARCH}
  artifacts:
    paths:
      - binaries
      - tess.txt
      - lept.txt
    when: on_success
    expire_in: 1 day

build:alpine:amd:
  extends: .build:alpine
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "amd64"
  tags:
    - native-amd64

build:alpine:arm:
  extends: .build:alpine
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "arm64"
  tags:
    - native-aarch64

.containerize:ubuntu:
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - TAGLIST=$(helper taglist "jitesoft/tesseract-ocr,ghcr.io/jitesoft/tesseract,${CI_REGISTRY_IMAGE}" "${TAGS}")
    - docker buildx build --push ${TAGLIST} --platform "linux/amd64,linux/arm64" --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" --build-arg TESSERACT_VERSION="$(cat tess.txt)" --build-arg LEPTONICA_VERSION="$(cat lept.txt)" -f ubuntu/Dockerfile .
    - docker pull ${CI_REGISTRY_IMAGE}:${UBUNTU_VERSION}
    - |
      for tag in $( echo $TAGS | tr "," " "); do
        docker tag ${CI_REGISTRY_IMAGE}:${UBUNTU_VERSION} quay.io/jitesoft/tesseract:${tag}
        docker push quay.io/jitesoft/tesseract:${tag}
      done
  tags: [protected, jitesoft, buildx]

.containerize:alpine:
  variables:
    TAGS: "alpine"
  needs:
    - build:alpine:arm
    - build:alpine:amd
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - docker buildx build --push -t ghcr.io/jitesoft/tesseract:alpine -t jitesoft/tesseract-ocr:alpine -t ${CI_REGISTRY_IMAGE}:alpine --platform linux/amd64,linux/arm64 --build-arg TESSERACT_VERSION="$(cat tess.txt)" --build-arg LEPTONICA_VERSION="$(cat lept.txt)" -f alpine/Dockerfile .
    - docker pull ${CI_REGISTRY_IMAGE}:alpine
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}:alpine quay.io/jitesoft/tesseract:${tag}
        docker push quay.io/jitesoft/tesseract:${tag}
      done
  tags: [protected, jitesoft, buildx]

containerize:alpine:latest:
  extends: .containerize:alpine
  variables:
    TAGS: "alpine"

containerize:ubuntu:20.04:
  needs:
    - build:ubuntu:arm:20.04
    - build:ubuntu:amd:20.04
  extends: .containerize:ubuntu
  variables:
    UBUNTU_VERSION: "20.04"
    TAGS: "20.04,focal,lts,latest"

containerize:ubuntu:18.04:
  needs:
    - build:ubuntu:arm:18.04
    - build:ubuntu:amd:18.04
  extends: .containerize:ubuntu
  variables:
    UBUNTU_VERSION: "18.04"
    TAGS: "18.04,bionic"

containerize:ubuntu:20.10:
  needs:
    - build:ubuntu:arm:20.10
    - build:ubuntu:amd:20.10
  extends: .containerize:ubuntu
  variables:
    UBUNTU_VERSION: "20.10"
    TAGS: "20.10,groovy,next"

scan:ubuntu:18.04:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:18.04"
    GIT_STRATEGY: none

scan:ubuntu:20.10:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:20.10"
    GIT_STRATEGY: none

scan:ubuntu:20.04:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:20.04"
    GIT_STRATEGY: none

scan:alpine:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:alpine"
    GIT_STRATEGY: none
