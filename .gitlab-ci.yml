stages:
  - download
  - build
  - containerize
  - scan

include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

download:
  variables:
    GIT_STRATEGY: none
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache wget grep coreutils
  script:
    - TESS_VERSION=$(wget -qO- https://github.com/tesseract-ocr/tesseract/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - LEPT_VERSION=$(wget -qO- https://github.com/DanBloomberg/leptonica/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - wget -O tess.tar.gz https://github.com/tesseract-ocr/tesseract/archive/${TESS_VERSION}.tar.gz
    - wget -O lept.tar.gz https://github.com/DanBloomberg/leptonica/releases/download/${LEPT_VERSION}/leptonica-${LEPT_VERSION}.tar.gz
    - wget https://github.com/tesseract-ocr/tessdata/raw/3.04.00/equ.traineddata
    - wget https://github.com/tesseract-ocr/tessdata/raw/3.04.00/osd.traineddata
    - wget -O eng.traineddata https://github.com/tesseract-ocr/tessdata_fast/blob/master/eng.traineddata?raw=true
    - printf "${TESS_VERSION}" > tess.txt
    - printf "${LEPT_VERSION}" > lept.txt
  artifacts:
    paths:
      - tess.txt
      - lept.txt
      - tess.tar.gz
      - lept.tar.gz
      - osd.traineddata
      - equ.traineddata
      - eng.traineddata
    expire_in: 5 days

.build:alpine:
  stage: build
  dependencies:
    - download
  image: registry.gitlab.com/jitesoft/dockerfiles/misc/buildbase
  before_script:
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
    - export PATH="/usr/lib/ccache/bin:$PATH"
  script:
    - mkdir -p src/tess
    - mkdir -p src/lept
    - tar -xhzf lept.tar.gz -C src/lept --strip-components=1
    - tar -xhzf tess.tar.gz -C src/tess --strip-components=1
    - patch src/tess/src/ccutil/ocrclass.h < alpine/tess.patch
    - apk add --no-cache pango-dev icu-dev cairo-dev libpng-dev libjpeg-turbo-dev tiff-dev libwebp-dev giflib-dev openjpeg-dev
    - cd ${CI_PROJECT_DIR}/src/lept
    - ./configure
    - make
    - make install
    - cd ${CI_PROJECT_DIR}/src/tess
    - ./autogen.sh
    - ./configure
    - make
    - make install
    - find -type f -name '*.a' -delete
    - find -type l -name '*.a' -delete
    - cd ${CI_PROJECT_DIR}
    - cp alpine/train-lang /usr/local/bin
    - mkdir -p /usr/local/share/tessdata
    - cp eng.traineddata equ.traineddata osd.traineddata /usr/local/share/tessdata
    - cp entrypoint /usr/local/bin
    - chmod +x /usr/local/bin
    - $(cd /usr/local && tar -czf ${CI_PROJECT_DIR}/tess-${DOCKER_ARCH}.tar.gz *)
  cache:
    paths:
      - ccache
    key: tess.build.ccache-${DOCKER_ARCH}
  artifacts:
    paths:
      - tess-${DOCKER_ARCH}.tar.gz
      - tess.txt
      - lept.txt
    when: on_success
    expire_in: 2 hours

build:alpine:amd:
  extends: .build:alpine
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "amd64"
  tags:
    - native-amd64

build:alpine:arm:
  extends: .build:alpine
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
    DOCKER_ARCH: "arm64"
  tags:
    - native-aarch64

.containerize:ubuntu:
  dependencies:
    - download
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/buildx:latest
  before_script:
    - apk add --no-cache wget grep
    - TESS_VERSION=$(wget -qO- https://github.com/tesseract-ocr/tesseract/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
    - LEPT_VERSION=$(wget -qO- https://github.com/DanBloomberg/leptonica/releases/latest | grep -oP '(?<=releases\/tag\/)(.*?)(?=\&)' | awk 'NR==1{print $1}')
  script:
    - docker build --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" --label "com.jitesoft.app.tesseract.version=${TESS_VERSION}" --label "com.jitesoft.app.leptonica.version=${LEPT_VERSION}" -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${UBUNTU_VERSION} -f ubuntu/Dockerfile .
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${UBUNTU_VERSION} ${CI_REGISTRY_IMAGE}:${tag}
        docker push ${CI_REGISTRY_IMAGE}:${tag}
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${UBUNTU_VERSION} jitesoft/tesseract-ocr:${tag}
        docker push jitesoft/tesseract-ocr:${tag}
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-${UBUNTU_VERSION} quay.io/jitesoft/tesseract:${tag}
        docker push quay.io/jitesoft/tesseract:${tag}
      done
  tags: [protected, jitesoft, buildx]

.containerize:alpine:
  variables:
    TAGS: "alpine"
  needs:
    - build:alpine:arm
    - build:alpine:amd
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/buildx:latest
  script:
    - docker buildx build --push -t jitesoft/tesseract-ocr:alpine -t ${CI_REGISTRY_IMAGE}:alpine --platform linux/amd64,linux/arm64 --build-arg TESSERACT_VERSION="$(cat tess.txt)" --build-arg LEPTONICA_VERSION="$(cat lept.txt)" -f alpine/Dockerfile .
    - docker pull ${CI_REGISTRY_IMAGE}:alpine
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}:alpine quay.io/jitesoft/tesseract:${tag}
        docker push quay.io/jitesoft/tesseract:${tag}
      done
  tags: [protected, jitesoft, buildx]

containerize:alpine:latest:
  extends: .containerize:alpine
  variables:
    TAGS: "alpine"

containerize:ubuntu:18.04:
  extends: .containerize:ubuntu
  variables:
    UBUNTU_VERSION: "18.04"
    TAGS: "18.04 bionic"

containerize:ubuntu:18.10:
  extends: .containerize:ubuntu
  variables:
    UBUNTU_VERSION: "18.10"
    TAGS: "18.10 cosmic"

containerize:ubuntu:19.04:
  extends: .containerize:ubuntu
  variables:
    UBUNTU_VERSION: "19.04"
    TAGS: "19.04 disco"

containerize:ubuntu:19.10:
  extends: .containerize:ubuntu
  variables:
    UBUNTU_VERSION: "19.10"
    TAGS: "19.10 eoan latest"

scan:ubuntu:18.04:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:18.04"
    GIT_STRATEGY: none

scan:ubuntu:18.10:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:18.10"
    GIT_STRATEGY: none

scan:ubuntu:19.04:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:19.04"
    GIT_STRATEGY: none

scan:ubuntu:19.10:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:19.10"
    GIT_STRATEGY: none

scan:alpine:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:alpine"
    GIT_STRATEGY: none
